<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HaPBoy&#39;s Notes</title>
  <icon>https://www.gravatar.com/avatar/8155e8a1092fcb62303fa6f19ae82b66</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ihapboy.com/"/>
  <updated>2017-12-02T14:18:20.575Z</updated>
  <id>https://ihapboy.com/</id>
  
  <author>
    <name>HaPBoy</name>
    <email>ihapboy@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSS 两栏布局方法总结</title>
    <link href="https://ihapboy.com/2017/12/02/css-2-column-layout/"/>
    <id>https://ihapboy.com/2017/12/02/css-2-column-layout/</id>
    <published>2017-12-02T03:59:56.000Z</published>
    <updated>2017-12-02T14:18:20.575Z</updated>
    
    <content type="html"><![CDATA[<p>CSS 布局是前端开发的一个重要内容，在 CSS2.1 之前没有出现真正意义上的布局属性，直到 CSS3 才出现了如 Flex、Grid 等布局属性。本文总结了目前主流的两栏布局方法。</p><blockquote><p>注意：本文中涉及 float 的布局均未对父元素进行清除浮动，在实际使用中需要在父容器清除浮动。（本文不讨论清除浮动的方法）</p></blockquote><p><img src="/images/css-multi-column-layout/2-column-layout.png" alt="两栏布局"></p><h2 id="绝对定位法-absolute-margin"><a href="#绝对定位法-absolute-margin" class="headerlink" title="绝对定位法 absolute + margin"></a>绝对定位法 absolute + margin</h2><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hd"</span>&gt;</span>Header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bd"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aside"</span>&gt;</span>侧边栏 固定宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>主内容栏 自适应宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ft"</span>&gt;</span>Footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.aside</span> &#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.main</span> &#123;</div><div class="line">  <span class="attribute">margin-left</span>: <span class="number">210px</span>; <span class="comment">/* 10px 列间隙 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>DEMO1</code>：<a href="https://ihapboy.github.io/front-end-lab/css-multi-column-layout/2-column-layout/absolute-margin.html" target="_blank" rel="noopener">绝对定位法 absolute + margin 两栏布局</a></p><p><strong>特点：</strong>1. 在不修改 <code>HTML</code> 的情况下，只需要修改 CSS 即可<code>支持任意调整列顺序</code>。2. <code>支持主内容优先显示</code>，只需将主内容的 <code>HTML</code> 放置在前即可。<br><strong>缺陷：</strong>绝对定位 <code>absoulte</code> 是定位流，会脱离常规流，不影响上下文排版，无法撑开父元素高度。<br><strong>结论：</strong>在内容量不可控的场景，不推荐使用该方式。</p><h2 id="浮动法-float-margin"><a href="#浮动法-float-margin" class="headerlink" title="浮动法 float + margin"></a>浮动法 float + margin</h2><h3 id="HTML-1"><a href="#HTML-1" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hd"</span>&gt;</span>Header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bd clearfix"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aside"</span>&gt;</span>侧边栏 固定宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>主内容栏 自适应宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ft"</span>&gt;</span>Footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="CSS-1"><a href="#CSS-1" class="headerlink" title="CSS"></a>CSS</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.aside</span> &#123;</div><div class="line">  <span class="attribute">float</span>: left;</div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.main</span> &#123;</div><div class="line">  <span class="attribute">margin-left</span>: <span class="number">210px</span>; <span class="comment">/* 10px 列间隙 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>DEMO2</code>：<a href="https://ihapboy.github.io/front-end-lab/css-multi-column-layout/2-column-layout/float-margin.html" target="_blank" rel="noopener">浮动法 float + margin 两栏布局</a></p><p><strong>特点：</strong>1. 在不修改 <code>HTML</code> 的情况下，只需要修改 CSS 即可<code>支持任意调整列顺序</code>。<br><strong>缺陷：</strong>1. <code>不支持主内容优先显示</code>。2. 不兼容IE6，<code>.main</code> 内部第一个元素存在清除浮动时，会发生 <code>.main</code> 掉下去的情况。3. <code>.main</code> 中存在清除浮动 <code>clear: both</code> 属性，样式会出错，<code>DEMO3</code>：<a href="https://ihapboy.github.io/front-end-lab/css-multi-column-layout/2-column-layout/float-margin-clear-bug.html" target="_blank" rel="noopener">浮动法 float + margin 两栏布局 clear: both BUG</a>。<br><strong>结论：</strong>若主内容栏包含需要清除浮动之类的元素，不适合使用该方式。</p><h2 id="浮动法改进版一-float-margin-wrap-双标签"><a href="#浮动法改进版一-float-margin-wrap-双标签" class="headerlink" title="浮动法改进版一 float + margin + wrap 双标签"></a>浮动法改进版一 float + margin + wrap 双标签</h2><h3 id="HTML-2"><a href="#HTML-2" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hd"</span>&gt;</span>Header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bd clearfix"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aside"</span>&gt;</span>侧边栏 固定宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main-wrap"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>主内容栏 自适应宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ft"</span>&gt;</span>Footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="CSS-2"><a href="#CSS-2" class="headerlink" title="CSS"></a>CSS</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.aside</span> &#123;</div><div class="line">  <span class="attribute">float</span>: left;</div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">position</span>: relative; <span class="comment">/* 提升侧边栏层级 */</span></div><div class="line">&#125;</div><div class="line"><span class="selector-class">.main-wrap</span> &#123;</div><div class="line">  <span class="attribute">float</span>: right;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">margin-left</span>: -<span class="number">200px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.main</span> &#123;</div><div class="line">  <span class="attribute">margin-left</span>: <span class="number">210px</span>; <span class="comment">/* 10px 列间隙 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>DEMO4</code>：<a href="https://ihapboy.github.io/front-end-lab/css-multi-column-layout/2-column-layout/float-margin-wrap.html" target="_blank" rel="noopener">浮动法改进版一 float + margin + wrap 双标签 两栏布局</a></p><p><strong>特点：</strong>1. 在不修改 <code>HTML</code> 的情况下，只需要修改 CSS 即可<code>支持任意调整列顺序</code>。2. <code>支持主内容优先显示</code>，只需将主内容的 <code>HTML</code> 放置在前即可。3.兼容性好，兼容所有浏览器。<br><strong>缺陷：</strong>结构增加，样式复杂。<br><strong>结论：</strong>推荐使用该方法，除了结构复杂没有其他明显缺陷。</p><h2 id="浮动法改进版二-float-overflow"><a href="#浮动法改进版二-float-overflow" class="headerlink" title="浮动法改进版二 float + overflow"></a>浮动法改进版二 float + overflow</h2><h3 id="HTML-3"><a href="#HTML-3" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hd"</span>&gt;</span>Header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bd clearfix"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aside"</span>&gt;</span>侧边栏 固定宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>主内容栏 自适应宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ft"</span>&gt;</span>Footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="CSS-3"><a href="#CSS-3" class="headerlink" title="CSS"></a>CSS</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.aside</span> &#123;</div><div class="line">  <span class="attribute">float</span>: left;</div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">margin-right</span>: <span class="number">10px</span>; <span class="comment">/* 10px 列间隙 */</span></div><div class="line">&#125;</div><div class="line"><span class="selector-class">.main</span> &#123;</div><div class="line">  <span class="attribute">overflow</span>: hidden; <span class="comment">/* 触发BFC */</span></div><div class="line">  *zoom: 1; /* IE6 使用 zoom: 1 触发 hasLayout */</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>DEMO5</code>：<a href="https://ihapboy.github.io/front-end-lab/css-multi-column-layout/2-column-layout/float-overflow.html" target="_blank" rel="noopener">浮动法改进版二 float + overflow 两栏布局</a></p><p><strong>特点：</strong>1. 在不修改 <code>HTML</code> 的情况下，只需要修改 CSS 即可<code>支持任意调整列顺序</code>。2. 设置简单，基于 BFC。<br><strong>缺陷：</strong>1. <code>不支持主内容优先显示</code>。2. <code>overflow: hidden</code> 会影响主内容栏滚动条。</p><h2 id="弹性盒子法-Flexbox-布局"><a href="#弹性盒子法-Flexbox-布局" class="headerlink" title="弹性盒子法 Flexbox 布局"></a>弹性盒子法 Flexbox 布局</h2><h3 id="HTML-4"><a href="#HTML-4" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hd"</span>&gt;</span>Header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bd"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aside"</span>&gt;</span>侧边栏 固定宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>主内容栏 自适应宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ft"</span>&gt;</span>Footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="CSS-4"><a href="#CSS-4" class="headerlink" title="CSS"></a>CSS</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.bd</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.aside</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">margin-right</span>: <span class="number">10px</span>; <span class="comment">/* 10px 列间隙 */</span></div><div class="line">&#125;</div><div class="line"><span class="selector-class">.main</span> &#123;</div><div class="line">  <span class="attribute">flex</span>: <span class="number">1</span>; <span class="comment">/* 展开适应宽度 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>DEMO6</code>：<a href="https://ihapboy.github.io/front-end-lab/css-multi-column-layout/2-column-layout/flex.html" target="_blank" rel="noopener">弹性盒子法 Flexbox 布局 两栏布局</a></p><p><strong>特点：</strong>1. 在不修改 <code>HTML</code> 的情况下，只需要修改 CSS 即可<code>支持任意调整列顺序</code>（使用 <code>order</code> 属性）。2. <code>支持主内容优先显示</code>，只需将主内容的 <code>HTML</code> 放置在前即可。<br><strong>缺陷：</strong>不兼容 IE &lt; 11<br><strong>结论：</strong>推荐使用该方法，除了对IE兼容性较差外没有其他明显缺陷。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上为目前主流的两栏布局方法，在不需要兼容 IE &lt; 11 的情况下，推荐使用 <code>弹性盒子法 Flexbox 布局</code> 方法，其次推荐 <code>浮动法改进版一 float + margin + wrap 双标签</code> 方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CSS 布局是前端开发的一个重要内容，在 CSS2.1 之前没有出现真正意义上的布局属性，直到 CSS3 才出现了如 Flex、Grid 等布局属性。本文总结了目前主流的两栏布局方法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：本文中涉及 float 的布局均未对父元素
      
    
    </summary>
    
    
      <category term="CSS" scheme="https://ihapboy.com/tags/CSS/"/>
    
      <category term="布局" scheme="https://ihapboy.com/tags/%E5%B8%83%E5%B1%80/"/>
    
      <category term="Flexbox" scheme="https://ihapboy.com/tags/Flexbox/"/>
    
  </entry>
  
  <entry>
    <title>CSS3 Flexbox 知识点整理</title>
    <link href="https://ihapboy.com/2017/09/12/css3-flexbox/"/>
    <id>https://ihapboy.com/2017/09/12/css3-flexbox/</id>
    <published>2017-09-12T07:45:04.000Z</published>
    <updated>2017-09-12T08:10:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>这段时间经常用到 Flexbox 弹性盒模型，十分简洁好用，不需要 float, position 等属性即可完成复杂的页面布局。若无需兼容 IE 或只在移动端开发，推荐使用 Flex 布局。</p><h2 id="Flexbox-布局"><a href="#Flexbox-布局" class="headerlink" title="Flexbox 布局"></a>Flexbox 布局</h2><p>Flexbox 是一种布置元素的布局模式，适应不同的屏幕尺寸，弹性盒子模型是对块模型的改进，flex容器的边缘也不会与其内容的边缘折叠。</p><p>Flex 容器默认存在两条轴，分别是水平主轴(main axis) 和 垂直的交叉轴(或侧轴)(cross axis)，可以通过修改 <code>flex-direction</code> 来改变主轴和交叉轴。</p><p>Flex 容器(Flex container): 包含着弹性项目的父元素。通过设置 <code>display: flex | inline-flex</code> 定义弹性容器。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">    <span class="attribute">display</span>: flex | inline-flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Flex-容器的-6-个属性"><a href="#Flex-容器的-6-个属性" class="headerlink" title="Flex 容器的 6 个属性"></a>Flex 容器的 6 个属性</h2><ol><li><p><code>flex-direction</code> 确立主轴。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">    flex-direction: row | row-reverse | column | column-reverse; // 默认值 row</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>row/row-reverse: 水平方向从左到右/从右到左<br>column/column-reverse: 垂直方向从上到下/从下到上</p></li><li><p><code>flex-wrap</code> 控制侧轴的方向和新行排列的方向，即弹性项目单行、多行排布。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">    flex-wrap: nowrap | wrap | wrap-reverse; // 默认值 nowrap</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>nowrap(默认值): 不换行<br>wrap/wrap-reverse: 项目主轴总尺寸超出容器时换行，第一行在上方/换行，第一行在下方</p></li><li><p><code>flex-flow</code> 是 <code>flex-direction</code> 和 <code>flex-wrap</code> 的简写，决定弹性项目如何排布。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">    flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;; // 默认值 row nowrap</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p><code>justify-content</code> 定义弹性项目沿主轴如何排布。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">    justify-content: flex-start | flex-end | center | space-between | space-around; // 默认值 flex-start</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>flex-start(默认值): 向主轴起始位置靠齐; flex-end: 向主轴结束位置靠齐; center: 向主轴中间位置靠齐;<br>space-between: 两端对齐，项目之间等距;<br>space-around: 每个项目两侧的间隔相等，项目之间的间隔比项目与边缘的间隔大一倍.</p></li><li><p><code>align-items</code> 定义弹性项目沿侧轴如何排布。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">    align-items: flex-start | flex-end | center | baseline | stretch; // 默认值 stretch</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>stretch(默认值): 项目未设置高(宽)度或者设为 auto，将在侧轴拉伸填充整个容器;<br>flex-start: 向侧轴起始位置靠齐; flex-end: 向侧轴结束位置靠齐; center: 向侧轴中间位置靠齐;<br>baseline: 根据项目的基线对齐.</p></li><li><p><code>align-content</code> 定义多个侧轴的空间分配方式，只有一根侧轴不起作用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">    align-content: flex-start | flex-end | center | space-between | space-around | stretch; // 默认值 stretch</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>stretch(默认值): 项目未设置高(宽)度或者设为 auto，将在侧轴拉伸填充整个容器;<br>flex-start: 向侧轴起始位置靠齐; flex-end: 向侧轴结束位置靠齐; center: 向侧轴中间位置靠齐;<br>space-between: 两端对齐，项目之间等距;<br>space-around: 每个项目两侧的间隔相等，项目之间的间隔比项目与边缘的间隔大一倍.</p></li></ol><h2 id="Flex-项目的-6-个属性"><a href="#Flex-项目的-6-个属性" class="headerlink" title="Flex 项目的 6 个属性"></a>Flex 项目的 6 个属性</h2><ol><li><p><code>order</code> 规定了弹性容器中的可伸缩项目在布局时的顺序，数值越小，排列越靠前，默认值为 0。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.item</span> &#123;</div><div class="line">    order: &lt;integer&gt;; // 默认值 0</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p><code>flex-basis</code> 伸缩基础，在进行计算剩余空间或超出空间前，给伸缩项目重新设置一个宽度，然后再计算。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.item</span> &#123;</div><div class="line">    flex-basis: &lt;length&gt; | auto; // 默认值 auto</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p><code>flex-grow</code> 当伸缩项目在主轴方向的总宽度 &lt; 伸缩容器，伸缩项目根据<strong>扩展因素</strong>分配伸缩容器的剩余空间。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.item</span> &#123;</div><div class="line">    flex-grow: &lt;number&gt;; // 默认值 0，即存在剩余空间不放大</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p><code>flex-shrink</code> 当伸缩项目在主轴方向的总宽度 &gt; 伸缩容器，伸缩项目根据<strong>缩小因素</strong>分配总宽度超出伸缩容器的空间。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.item</span> &#123;</div><div class="line">    flex-shrink: &lt;number&gt;; // 默认值 1，即如果空间不足，该项目将缩小，负值对该属性无效。</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p><code>flex</code> flex-grow, flex-shrink 和 flex-basis 的简写</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.item</span> &#123;</div><div class="line">    <span class="attribute">flex</span>: none | [ &lt;<span class="string">'flex-grow'</span>&gt; &lt;<span class="string">'flex-shrink'</span>&gt;? || &lt;<span class="string">'flex-basis'</span>&gt; ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>initial(默认值): <code>flex: 0 1 auto</code> 即 flex-grow: 0; flex-shrink: 1; flex-basis: auto;<br>none: <code>flex: 0 0 auto</code> 元素会根据自身宽高来设置尺寸。它是完全非弹性的：既不会缩短，也不会伸长来适应 flex 容器;<br>auto: <code>flex: 1 1 auto</code>;<br><code>&lt;number&gt;</code>: <code>flex: number 1 0%</code>;<br><code>&lt;width&gt;</code>: <code>flex: 1 1 width</code> 例如 <code>flex: 0% =&gt; flex: 1 1 0%</code>, <code>flex: 10px =&gt; flex: 1 1 10px</code>.</p><p><strong>拉伸后弹性项目宽度计算</strong></p><blockquote><p>弹性项目扩展宽度 = (容器宽度 - 项目宽度或项目设置的 flex-basis 总和) * 对应的 flex-grow 比例<br>拉伸后弹性项目宽度 = 原弹性项目宽度 + 扩展宽度</p></blockquote><p><strong>压缩后弹性项目宽度计算</strong></p><blockquote><p>弹性项目缩小宽度 = (项目宽度或项目设置的 flex-basis 总和 - 容器宽度) <em> <em>*(对应的 flex-shrink 项目宽度或项目设置的 flex-basis 加权比例)</em></em><br>压缩后弹性项目宽度 = 原弹性项目宽度 - 缩小宽度</p></blockquote><p><strong>注意：使用缩写属性会留下一些陷阱，导致表现的结果不尽如人意。</strong></p><blockquote><p>例如 flex: 1 与 flex-grow: 1<br>flex: 1      =&gt; flex: 1 1 0%<br>flex-grow: 1 =&gt; flex: 1 1 auto<br>两者的区别在于 flex-basis 的值不同。flex: 1 为项目宽度重新设置了宽度为0，所以可分配空间为整个容器。</p></blockquote></li><li><p><code>align-self</code> 定义单个弹性项目在侧轴上应当如何对齐，这个定义会覆盖由 align-items 所确立的默认值。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.item</span> &#123;</div><div class="line">     <span class="attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><h2 id="需要注意的-Flexbox-特性-Bug"><a href="#需要注意的-Flexbox-特性-Bug" class="headerlink" title="需要注意的 Flexbox 特性 / Bug"></a>需要注意的 Flexbox 特性 / Bug</h2><ol><li><p>无效属性</p><ul><li><code>float</code> 和 <code>clear</code> 在弹性项目无效</li><li><code>vertical-align</code> 在弹性项目无效</li><li><code>column-*</code> 在弹性容器无效</li><li><code>::first-line</code> 和 <code>::first-letter</code> 在弹性容器无效</li></ul></li><li><p>弹性容器中的 非空字符文本节点 也是弹性项目</p></li><li><p><code>margin</code> 折叠</p><ul><li>弹性容器和弹性项目的 <code>margin</code> 不会折叠</li><li>弹性项目间的 <code>margin</code> 不会折叠</li></ul></li><li><p>旧版 Flexbox 的 BUG</p><p>弹性项目为行内元素要加 <code>display: block</code> 或 <code>display: flex</code> 属性</p></li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout" target="_blank" rel="noopener">CSS 弹性盒子布局 - MDN</a><br><a href="https://zhuanlan.zhihu.com/p/25303493" target="_blank" rel="noopener">30 分钟学会 Flex 布局 - 林东洲</a><br><a href="https://segmentfault.com/a/1190000009932882" target="_blank" rel="noopener">Flexbox布局的正确使用姿势 - Leechikit</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这段时间经常用到 Flexbox 弹性盒模型，十分简洁好用，不需要 float, position 等属性即可完成复杂的页面布局。若无需兼容 IE 或只在移动端开发，推荐使用 Flex 布局。&lt;/p&gt;
&lt;h2 id=&quot;Flexbox-布局&quot;&gt;&lt;a href=&quot;#Flexbo
      
    
    </summary>
    
    
  </entry>
  
</feed>
